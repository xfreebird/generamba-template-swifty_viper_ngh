//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import Swinject

class {{ module_info.name }}DefaultModuleBuilder: NSObject {

    fileprivate let container: Container
    
    init(parentContainer: Container) {
        container = Container(parent: parentContainer)
    }

    func build() -> {{ module_info.name }}ViewController! {

        container.register({{ module_info.name }}Interactor.self) { _ in
            {{ module_info.name }}InteractorImp() //Add service
        }

        container.register({{ module_info.name }}ViewController.self) { _ in

            {{ module_info.name }}ViewController(nibName: String(describing: {{ module_info.name }}ViewController.self), bundle: Bundle.main)

            }.initCompleted { container, view in

                view.presenter = container.resolve({{ module_info.name }}Presenter.self)
        }

        container.register({{ module_info.name }}Router.self) { container in
            let router = {{ module_info.name }}RouterImp()
            router.viewController = container.resolve({{ module_info.name }}ViewController.self)!
            return router
        }

        container.register({{ module_info.name }}Presenter.self) { container in
            {{ module_info.name }}PresenterImp(view: container.resolve({{ module_info.name }}ViewController.self)!,
                                interactor: container.resolve({{ module_info.name }}Interactor.self)!,
                                router: container.resolve({{ module_info.name }}Router.self)!)
        }

        return container.resolve({{ module_info.name }}ViewController.self)!
    }
}
